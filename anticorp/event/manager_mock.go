// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package event is a generated GoMock package.
package event

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// On mocks base method
func (m *MockManager) On(eventName string, callback CallbackFunc) (DoneFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "On", eventName, callback)
	ret0, _ := ret[0].(DoneFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// On indicates an expected call of On
func (mr *MockManagerMockRecorder) On(eventName, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "On", reflect.TypeOf((*MockManager)(nil).On), eventName, callback)
}

// Next mocks base method
func (m *MockManager) Next(ctx context.Context, eventName string) (Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx, eventName)
	ret0, _ := ret[0].(Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockManagerMockRecorder) Next(ctx, eventName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockManager)(nil).Next), ctx, eventName)
}

// Emit mocks base method
func (m *MockManager) Emit(eventName string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Emit", eventName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Emit indicates an expected call of Emit
func (mr *MockManagerMockRecorder) Emit(eventName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockManager)(nil).Emit), eventName, data)
}
