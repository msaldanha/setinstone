// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ipfs/interface-go-ipfs-core (interfaces: PubSubAPI,PubSubSubscription,PubSubMessage)

// Package event_test is a generated GoMock package.
package event_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	iface "github.com/ipfs/interface-go-ipfs-core"
	options "github.com/ipfs/interface-go-ipfs-core/options"
	peer "github.com/libp2p/go-libp2p-core/peer"
	reflect "reflect"
)

// MockPubSubAPI is a mock of PubSubAPI interface
type MockPubSubAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubAPIMockRecorder
}

// MockPubSubAPIMockRecorder is the mock recorder for MockPubSubAPI
type MockPubSubAPIMockRecorder struct {
	mock *MockPubSubAPI
}

// NewMockPubSubAPI creates a new mock instance
func NewMockPubSubAPI(ctrl *gomock.Controller) *MockPubSubAPI {
	mock := &MockPubSubAPI{ctrl: ctrl}
	mock.recorder = &MockPubSubAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPubSubAPI) EXPECT() *MockPubSubAPIMockRecorder {
	return m.recorder
}

// Ls mocks base method
func (m *MockPubSubAPI) Ls(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ls", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ls indicates an expected call of Ls
func (mr *MockPubSubAPIMockRecorder) Ls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ls", reflect.TypeOf((*MockPubSubAPI)(nil).Ls), arg0)
}

// Peers mocks base method
func (m *MockPubSubAPI) Peers(arg0 context.Context, arg1 ...options.PubSubPeersOption) ([]peer.ID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Peers", varargs...)
	ret0, _ := ret[0].([]peer.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peers indicates an expected call of Peers
func (mr *MockPubSubAPIMockRecorder) Peers(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockPubSubAPI)(nil).Peers), varargs...)
}

// Publish mocks base method
func (m *MockPubSubAPI) Publish(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockPubSubAPIMockRecorder) Publish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSubAPI)(nil).Publish), arg0, arg1, arg2)
}

// Subscribe mocks base method
func (m *MockPubSubAPI) Subscribe(arg0 context.Context, arg1 string, arg2 ...options.PubSubSubscribeOption) (iface.PubSubSubscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(iface.PubSubSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockPubSubAPIMockRecorder) Subscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSubAPI)(nil).Subscribe), varargs...)
}

// MockPubSubSubscription is a mock of PubSubSubscription interface
type MockPubSubSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubSubscriptionMockRecorder
}

// MockPubSubSubscriptionMockRecorder is the mock recorder for MockPubSubSubscription
type MockPubSubSubscriptionMockRecorder struct {
	mock *MockPubSubSubscription
}

// NewMockPubSubSubscription creates a new mock instance
func NewMockPubSubSubscription(ctrl *gomock.Controller) *MockPubSubSubscription {
	mock := &MockPubSubSubscription{ctrl: ctrl}
	mock.recorder = &MockPubSubSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPubSubSubscription) EXPECT() *MockPubSubSubscriptionMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockPubSubSubscription) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPubSubSubscriptionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPubSubSubscription)(nil).Close))
}

// Next mocks base method
func (m *MockPubSubSubscription) Next(arg0 context.Context) (iface.PubSubMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(iface.PubSubMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockPubSubSubscriptionMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPubSubSubscription)(nil).Next), arg0)
}

// MockPubSubMessage is a mock of PubSubMessage interface
type MockPubSubMessage struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMessageMockRecorder
}

// MockPubSubMessageMockRecorder is the mock recorder for MockPubSubMessage
type MockPubSubMessageMockRecorder struct {
	mock *MockPubSubMessage
}

// NewMockPubSubMessage creates a new mock instance
func NewMockPubSubMessage(ctrl *gomock.Controller) *MockPubSubMessage {
	mock := &MockPubSubMessage{ctrl: ctrl}
	mock.recorder = &MockPubSubMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPubSubMessage) EXPECT() *MockPubSubMessageMockRecorder {
	return m.recorder
}

// Data mocks base method
func (m *MockPubSubMessage) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data
func (mr *MockPubSubMessageMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockPubSubMessage)(nil).Data))
}

// From mocks base method
func (m *MockPubSubMessage) From() peer.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "From")
	ret0, _ := ret[0].(peer.ID)
	return ret0
}

// From indicates an expected call of From
func (mr *MockPubSubMessageMockRecorder) From() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockPubSubMessage)(nil).From))
}

// Seq mocks base method
func (m *MockPubSubMessage) Seq() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seq")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Seq indicates an expected call of Seq
func (mr *MockPubSubMessageMockRecorder) Seq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seq", reflect.TypeOf((*MockPubSubMessage)(nil).Seq))
}

// Topics mocks base method
func (m *MockPubSubMessage) Topics() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Topics indicates an expected call of Topics
func (mr *MockPubSubMessageMockRecorder) Topics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockPubSubMessage)(nil).Topics))
}
